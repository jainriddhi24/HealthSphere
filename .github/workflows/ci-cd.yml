name: HealthSphere CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript check
      run: npx tsc --noEmit
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next

  # Backend Tests and Build
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: healthsphere_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npx prisma generate
    
    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/healthsphere_test
    
    - name: Run TypeScript check
      run: npx tsc --noEmit
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/healthsphere_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist

  # ML API Tests and Build
  ml-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ml_api
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ml_api/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        pip install flake8 black
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app/
    
    - name: Run type checking
      run: |
        pip install mypy
        mypy app/ --ignore-missing-imports
    
    - name: Run tests
      run: |
        pip install pytest pytest-asyncio
        pytest tests/ -v
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ml-api-build
        path: ml_api/

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-api]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/dist
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ml-api-build
        path: ml_api/
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run integration tests
      run: |
        # Wait for services to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
        # Run integration tests
        npm install -g newman
        newman run tests/integration/healthsphere-api-tests.postman_collection.json
    
    - name: Stop services
      run: docker-compose -f docker-compose.test.yml down

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-api, integration-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Deploy to ECS
      run: |
        # Build and push Docker images
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # Build and push frontend
        docker build -t $ECR_REGISTRY/healthsphere-frontend:staging ./frontend
        docker push $ECR_REGISTRY/healthsphere-frontend:staging
        
        # Build and push backend
        docker build -t $ECR_REGISTRY/healthsphere-backend:staging ./backend
        docker push $ECR_REGISTRY/healthsphere-backend:staging
        
        # Build and push ML API
        docker build -t $ECR_REGISTRY/healthsphere-ml-api:staging ./ml_api
        docker push $ECR_REGISTRY/healthsphere-ml-api:staging
        
        # Update ECS services
        aws ecs update-service --cluster healthsphere-staging --service frontend-service --force-new-deployment
        aws ecs update-service --cluster healthsphere-staging --service backend-service --force-new-deployment
        aws ecs update-service --cluster healthsphere-staging --service ml-api-service --force-new-deployment

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-api, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Deploy to ECS
      run: |
        # Build and push Docker images
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # Build and push frontend
        docker build -t $ECR_REGISTRY/healthsphere-frontend:latest ./frontend
        docker push $ECR_REGISTRY/healthsphere-frontend:latest
        
        # Build and push backend
        docker build -t $ECR_REGISTRY/healthsphere-backend:latest ./backend
        docker push $ECR_REGISTRY/healthsphere-backend:latest
        
        # Build and push ML API
        docker build -t $ECR_REGISTRY/healthsphere-ml-api:latest ./ml_api
        docker push $ECR_REGISTRY/healthsphere-ml-api:latest
        
        # Update ECS services
        aws ecs update-service --cluster healthsphere-production --service frontend-service --force-new-deployment
        aws ecs update-service --cluster healthsphere-production --service backend-service --force-new-deployment
        aws ecs update-service --cluster healthsphere-production --service ml-api-service --force-new-deployment
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
